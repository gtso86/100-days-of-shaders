<jittershader name="pixelsort-2">
	<description>
	Pixel sort v2
  https://www.shadertoy.com/view/XsBfRG
	</description>
  <param name="THR" type="float" default="0.0" />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.0">
    <bind param="THR" program="fp" />
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

varying vec2 texcoord0;
varying vec2 texdim0;

uniform sampler2DRect tex0;
uniform float THR;

#define DIR true
#define SHADOW true
#define REVERSE false

float gray( vec3 c ) {
  return dot( c, vec3( 0.299, 0.587, 0.114 ) );
}

vec3 toRgb( float i ) {
  return vec3(
    mod( i, 256.0 ),
    mod( floor( i / 256.0 ), 256.0 ),
    floor( i / 65536.0 )
  ) / 255.0;
}

bool thr(float v) {
  return SHADOW ? ( THR < v ) : ( v < THR );
}

void main() {
  vec2 uv = texcoord0 / texdim0;
  vec2 dir = DIR ? vec2( 0.0, 1.0 ) : vec2( 1.0, 0.0 );
  float wid = DIR ? texdim0.y : texdim0.x;
  float pos = DIR ? floor( uv.y * texdim0.y ) : floor( uv.x * texdim0.x );

  float val = gray( texture2DRect( tex0, texcoord0 ).xyz );

  if ( !thr( val ) ) {
    float post = pos;
    float rank = 0.0;
    float head = 0.0;
    float tail = 0.0;

    for ( int i = 0; i < int( wid ); i ++ ) {
      post -= 1.0;
      if ( post == -1.0 ) { head = post + 1.0; break; }
      vec2 p = dir * ( post + 0.5 ) / wid + dir.yx * uv;
      float v = gray( texture2DRect( tex0, p * texdim0 ).xyz );
      if ( thr( v ) ) { head = post + 1.0; break; }
      if ( v <= val ) { rank += 1.0; }
    }

    post = pos;
    for ( int i = 0; i < int( wid ); i ++ ) {
      post += 1.0;
      if ( wid == post ) { tail = post - 1.0; break; }
      vec2 p = dir * ( post + 0.5 ) / wid + dir.yx * uv;
      float v = gray( texture2DRect( tex0, p * texdim0).xyz );
      if ( thr( v ) ) { tail = post - 1.0; break; }
      if ( v < val ) { rank += 1.0; }
    }

    pos = REVERSE ? ( tail - rank ) : ( head + rank );
  }

  gl_FragColor = vec4( toRgb( pos ), 1.0 );
}
]]>
		</program>
	</language>
</jittershader>
