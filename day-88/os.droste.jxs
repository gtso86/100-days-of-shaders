<jittershader name="droste">
	<description>
	Droste effect
  https://github.com/SableRaf/Filters4Processing/blob/master/sketches/Droste/data/droste.glsl
	</description>
  <param name="branches" type="float" default="1.0" />
  <param name="scale" type="float" default="0.5" />
  <param name="time" type="float" default="0.0" />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.0">
    <bind param="branches" program="fp" />
    <bind param="scale" program="fp" />
    <bind param="time" program="fp" />
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

varying vec2 texcoord0;
varying vec2 texdim0;

uniform sampler2DRect tex0;
uniform float branches;
uniform float scale;
uniform float time;

const float TWO_PI = 3.141592*2.0;

vec2 complexExp(in vec2 z){
  return vec2(exp(z.x)*cos(z.y),exp(z.x)*sin(z.y));
}
vec2 complexLog(in vec2 z){
  return vec2(log(length(z)), atan(z.y, z.x));
}
vec2 complexMult(in vec2 a,in vec2 b){
  return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
}
float complexMag(in vec2 z){
  return float(pow(length(z), 2.0));
}
vec2 complexReciprocal(in vec2 z){
  return vec2(z.x / complexMag(z), -z.y / complexMag(z));
}
vec2 complexDiv(in vec2 a,in vec2 b){
  return complexMult(a, complexReciprocal(b));
}
vec2 complexPower(in vec2 a, in vec2 b){
  return complexExp( complexMult(b,complexLog(a))  );
}
float nearestPower(in float a, in float base){
  return pow(base,  ceil(  log(abs(a))/log(base)  )-1.0 );
}
float map(float value, float istart, float istop, float ostart, float ostop) {
  return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}
vec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {
  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}

void main() {
  //SHIFT AND SCALE COORDINATES TO <-1,1>
  vec2 uv = map(texcoord0, vec2(0.0), texdim0, vec2(-1.0), vec2(1.0));

  //ESCHER GRID TRANSFORM:
  float factor = pow(1.0/scale, branches);
  uv= complexPower(uv, complexDiv(vec2( log(factor) ,TWO_PI), vec2(0.0,TWO_PI) ) );

  //RECTANGULAR DROSTE EFFECT:
  float FT = fract(time);
  FT = log(FT+1.)/log(2.);
  uv *= 1.0+FT*(scale-1.0);

  float npower = max(nearestPower(uv.x,scale),nearestPower(uv.y,scale));
  uv.x = map(uv.x,-npower,npower,0.0,texdim0.x);
  uv.y = map(uv.y,-npower,npower,0.0,texdim0.y);

  //UNDO SHIFT AND SCALE:
  gl_FragColor = texture2DRect(tex0, uv);
}
]]>
		</program>
	</language>
</jittershader>
