<jittershader name="lumasker">	<description>	randomized grid sampling	</description>	<param name="time" type="float" default="0.0" />	<param name="grid_divisions" type="float" default="1.0" />	<param name="tex0" type="int" default="0" />	<language name="glsl" version="1.0">		<bind param="time" program="fp" />		<bind param="grid_divisions" program="fp" />		<bind param="tex0" program="fp" />		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />		<program name="fp" type="fragment"><![CDATA[varying vec2 texcoord0;varying vec2 texdim0;uniform float time;uniform float grid_divisions;uniform sampler2DRect tex0;// reference: https://github.com/msfeldstein/glsl-map/blob/master/index.glslvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);}// reference: https://github.com/mattdesl/glsl-random/blob/master/index.glslfloat random(vec2 co) {  float a = 12.9898;  float b = 78.233;  float c = 43758.5453;  float dt= dot(co.xy, vec2(a, b));  float sn= mod(dt, 3.14);  return fract(sin(sn) * c);}void main() {  vec2 division = map(floor(map(texcoord0, vec2(0.0), texdim0, vec2(0.0), vec2(grid_divisions))), vec2(0.0), vec2(grid_divisions), vec2(0.0), texdim0);  vec2 random_seed = vec2(division + time * step(2.0, grid_divisions));  vec2 random_offset = map(vec2(random(random_seed)), vec2(0.0), vec2(1.0), vec2(0.0), texdim0);  vec2 tex_coords = mod(texcoord0 + random_offset, texdim0);	vec4 tex_color = texture2DRect(tex0, tex_coords);	gl_FragColor = tex_color;}]]>		</program>	</language></jittershader>