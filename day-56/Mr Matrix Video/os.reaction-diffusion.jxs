<jittershader name="reaction diffusion">
  <description>
  reaction diffusion
  </description>
  <param name="time" type="float" default="0.0" />
  <param name="flow" type="float" default="1.003685" />
  <param name="clear" type="int" default="0" />
  <param name="seedRandom" type="int" default="0" />
  <param name="seedScale" type="float" default="0.0021" />
  <param name="seedThreshold" type="float" default="0.15" />
  <param name="dA" type="float" default="1.0" />
  <param name="dB" type="float" default="0.335987" />
  <param name="feed" type="float" default="0.003251" />
  <param name="k" type="float" default="0.021677" />
  <param name="tex0" type="int" default="0" />
  <language name="glsl" version="1.0">
    <bind param="time" program="fp" />
    <bind param="flow" program="fp" />
    <bind param="clear" program="fp" />
    <bind param="seedRandom" program="fp" />
    <bind param="seedScale" program="fp" />
    <bind param="seedThreshold" program="fp" />
    <bind param="dA" program="fp" />
    <bind param="dB" program="fp" />
    <bind param="feed" program="fp" />
    <bind param="k" program="fp" />
    <bind param="tex0" program="fp" />
    <program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
    <program name="fp" type="fragment">
<![CDATA[

// references:
// Jason K Smith's ThreeJS reaction diffusion shader http://colordodge.com/ReactionDiffusion/
// Dan Shiffman's reaction diffusion tutorial: https://www.youtube.com/watch?v=BV9ny785UNc

varying vec2 texcoord0;
varying vec2 texdim0;

uniform sampler2DRect tex0;

uniform float time;
uniform vec3 brush;
uniform float brushSize;
uniform float flow;
uniform int clear;
uniform int seedRandom;
uniform float seedScale;
uniform float seedThreshold;

uniform float dA;
uniform float dB;
uniform float feed;
uniform float k;

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r) {
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) {
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
}

vec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {
  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}

vec2 reactionDiffusion() {
  vec4 tex0Color = texture2DRect(tex0, texcoord0);
  vec4 texColor = tex0Color;

  vec2 st = texcoord0;

  float a = texColor.x;
  float b = texColor.y;

  if (clear == 1) {
    a = 1.0;
    b = 0.0;
  }

  if (seedRandom == 1) {
    a = 0.0;
    b = snoise(vec3(st * seedScale, time));
    if (b < seedThreshold) {
      b = 0.0;
    }
  }

  float diff1 = 0.2 * flow;
  float diff2 = 0.05 * flow;

  float laplaceA = 0.0;
  laplaceA += a * -1.0;

  float laplaceB = 0.0;
  laplaceB += b * -1.0;

  vec4 N = texture2DRect(tex0, st + vec2(0.0, -1.0));
  vec4 S = texture2DRect(tex0, st + vec2(0.0, 1.0));
  vec4 E = texture2DRect(tex0, st + vec2(1.0, 0.0));
  vec4 W = texture2DRect(tex0, st + vec2(-1.0, 0.0));

  vec4 NE = texture2DRect(tex0, st + vec2(1.0, 1.0));
  vec4 NW = texture2DRect(tex0, st + vec2(-1.0, 1.0));
  vec4 SE = texture2DRect(tex0, st + vec2(1.0, -1.0));
  vec4 SW = texture2DRect(tex0, st + vec2(-1.0, -1.0));

  laplaceA += N.r * diff1;
  laplaceA += S.r * diff1;
  laplaceA += E.r * diff1;
  laplaceA += W.r * diff1;
  laplaceA += NE.r * diff2;
  laplaceA += NW.r * diff2;
  laplaceA += SE.r * diff2;
  laplaceA += SW.r * diff2;

  laplaceB += N.g * diff1;
  laplaceB += S.g * diff1;
  laplaceB += E.g * diff1;
  laplaceB += W.g * diff1;
  laplaceB += NE.g * diff2;
  laplaceB += NW.g * diff2;
  laplaceB += SE.g * diff2;
  laplaceB += SW.g * diff2;

  // for (int i = 0; i < 3; i++) {
  //   for (int j = 0; j < 3; j++) {
  //     // use diff 1 if the cell we're looking at is north, south, east, or west
  //     float diff = (i == 1 || j == 1) ? diff1 : diff2;
  //     vec4 cellColor = texture2DRect(tex0, st + vec2(ivec2(i - 1, j - 1)));
  //     laplaceA += cellColor.x * diff;
  //     laplaceB += cellColor.y * diff;
  //   }
  // }

  float newA = a + (dA * laplaceA - a * b * b + feed * (1.0-a)) * 1.0;
  float newB = b + (dB * laplaceB + a * b * b - (k + feed) * b) * 1.0;

  newA = clamp(newA, 0.0, 1.0);
  newB = clamp(newB, 0.0, 1.0);

  return vec2(newA, newB);
}

void main() {
  vec2 reaction = reactionDiffusion();
  gl_FragColor = vec4(reaction, 0.0, 1.0);
}

]]>
    </program>
  </language>
</jittershader>
